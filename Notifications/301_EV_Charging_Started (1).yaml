alias: 301_EV_Charging_Started
description: |
  # EV Charging Monitor - Session Started
  Version: 2.4.0
  Last Updated: 2025-03-11
  ## Functions:
  1. Tracks charging session initialization
  2. Records initial charging metrics
  3. Provides detailed session start notifications
trigger:
  - platform: state
    entity_id: sensor.eveus_ev_charger_state
    to: Charging
condition: []
variables:
  current_amps: "{{ states('number.eveus_ev_charger_charging_current')|float }}"
  soc_data:
    current: "{{ states('sensor.eveus_ev_charger_soc_percent')|float }}"
    target: "{{ states('input_number.ev_target_soc')|float }}"
    increase: "{{ states('input_number.ev_target_soc')|float - states('sensor.eveus_ev_charger_soc_percent')|float }}"
    capacity: "{{ states('input_number.ev_battery_capacity')|float }}"
    current_kwh: "{{ (states('input_number.ev_battery_capacity')|float * states('sensor.eveus_ev_charger_soc_percent')|float / 100)|round(1) }}"
    target_kwh: "{{ (states('input_number.ev_battery_capacity')|float * states('input_number.ev_target_soc')|float / 100)|round(1) }}"
    added_kwh: "{{ ((states('input_number.ev_battery_capacity')|float * states('input_number.ev_target_soc')|float / 100) - 
                   (states('input_number.ev_battery_capacity')|float * states('sensor.eveus_ev_charger_soc_percent')|float / 100))|round(1) }}"
  time_data:
    eta: >
      {% set power = states('sensor.eveus_ev_charger_power')|float %}
      {% set correction = states('input_number.ev_soc_correction')|float %}
      {% set remaining_kwh = ((states('input_number.ev_target_soc')|float - 
                              states('sensor.eveus_ev_charger_soc_percent')|float) * 
                              states('input_number.ev_battery_capacity')|float / 100) %}
      
      {% set power_kw = power / 1000 %}
      {% set efficiency = (100 - correction) / 100 %}
      {% set charging_hours = remaining_kwh / (power_kw * efficiency) %}
      {% set charging_minutes = (charging_hours * 60)|round(0) %}
      
      {% set completion = now() + timedelta(minutes=charging_minutes) %}
      {{ completion.strftime('%H:%M %d.%m.%Y') }}
    duration: >
      {% set power = states('sensor.eveus_ev_charger_power')|float %}
      {% set correction = states('input_number.ev_soc_correction')|float %}
      {% set remaining_kwh = ((states('input_number.ev_target_soc')|float - 
                              states('sensor.eveus_ev_charger_soc_percent')|float) * 
                              states('input_number.ev_battery_capacity')|float / 100) %}
      
      {% set power_kw = power / 1000 %}
      {% set efficiency = (100 - correction) / 100 %}
      {% set charging_hours = remaining_kwh / (power_kw * efficiency) %}
      {% set charging_minutes = (charging_hours * 60)|round(0) %}
      
      {% set days = (charging_minutes / 1440)|int %}
      {% set hours = ((charging_minutes % 1440) / 60)|int %}
      {% set mins = (charging_minutes % 60)|int %}
      
      {% if days > 0 %}
        {{ days }}d {{ hours }}h {{ '%02d'|format(mins) }}m
      {% else %}
        {{ hours }}h {{ '%02d'|format(mins) }}m
      {% endif %}
action:
  - service: notify.harold
    data:
      title: "*EV* 🪫 *Charging Started* | {{ current_amps|round(0)|int }}A"
      message: |
        ⏰ ETA: {{ time_data.eta }} (in {{ time_data.duration }})
        🔋 SoC: {{ soc_data.current|round(0) }}% → {{ soc_data.target|round(0) }}% (+{{ soc_data.increase|round(0) }}%)
        ⚡ Energy kWh: {{ soc_data.current_kwh }} → {{ soc_data.target_kwh }} (+{{ soc_data.added_kwh }})
mode: single
max_exceeded: silent
